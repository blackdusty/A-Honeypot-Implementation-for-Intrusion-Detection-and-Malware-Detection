#!/usr/bin/env python

#this code is written with python2.7
#auth.log file is parsed to detect brute force attacks and print a report.

#global variables:
auth_info = dict() 
ip = 0
time = 0
attempts = 0
index = 12 # index of IP in the line
totalFailed=0

def main():

	with open('/home/user1/ahmed/auth.log', 'r') as f:
		for line in f:
			if 'sshd' and 'Failed' in line:
				check(line)
			elif 'sshd' and 'Accepted' in line:
				check(line)
			elif 'session closed for user' in line:
				check(line)
	Ratio()
  Report(totalFailed)

def Ratio():
	# this function checks (success/failed) ratio to remove false positives
	tmp_list = []
	
	for key, value in auth_info.iteritems():
		if value[4] > 0:
			# tolerance is minimum 1 success of 10
			if (value[4]/float(value[2])) > float(0.1):
				tmp_list.append(key)
			
	# Removing keys with ratio > 0.1 (good), key is the IP
	for keys in tmp_list:
		del auth_info[keys]

def check(line):
	# this function checks failed logins in the logfile
	line = line.split()
	#      Month            Day            Time_stamp
	time = line[0] + ' ' + line[1] + ' ' + line[2]
	
	if 'Failed' in line:
		if 'invalid' in line:
			#then ip resides in index=12
			storeFailed(line, index, time)
		else:
			#ip resides in index=10
			storeFailed(line, index - 2, time)
		
	elif 'Accepted' in line:
		storeSuccessful(line, time)

		
def storeFailed(line, index, time):	
	attempts = 0
	success = 0       #because this function is only for failed
	ip = line[index]
			
	if ip not in auth_info:          #if false > execute
		auth_info[ip] = [time, time, attempts, [], success]

	# If IP exists, then renew end time increament attempts by 1
	auth_info[ip][1] = time
	auth_info[ip][2] += 1		

def storeSuccessful(line, time):
	ip = line[10]
	user = line[8]

	if ip not in auth_info:
		return
		
	auth_info[ip][3].append(time)
	auth_info[ip][3].append(user) # adds username(root or others)
	auth_info[ip][1] = time
	auth_info[ip][4] += 1 
	
def Report(totalFailed):
	successful = 0
	
	with open('sshd_analyzer_report', 'w') as f2:
	
		for key, value in auth_info.iteritems():
			f2.write('\n\nAttacker IP: ' + key)
			f2.write('\nStart time: ' + value[0])
			f2.write('\nEnd time: ' + value[1])
			f2.write('\nLogin attempts: ' + str(value[2]))
			
			if value[4] > 0:
				successful += 1
				f2.write('\nSuccessful attempts: ' + str(value[4]))
				f2.write('\nRatio: ' + str(value[4]/float(value[2])))
				
				if len(value[3]) > 0:
					f2.write('\nCompromised account details:')
					count = 0
					
					while count < len(value[3]):
						f2.write('\n')
						f2.write(value[3][count] + ' : ' + value[3][count+1])
						count += 2
											
			totalFailed += value[2]
			
	print 'Total number of attackers: ' + str(len(auth_info))
	print 'Total number of successful attackers: ' + str(successful)
	print 'Total number of failed attackers: ' + str(len(auth_info) - successful)
	print 'Number of failed login attempts: ' + str(totalFailed)
	f2.close()
	
							
if __name__ == "__main__":
	main()
