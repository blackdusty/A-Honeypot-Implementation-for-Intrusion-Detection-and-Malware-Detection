#!/usr/bin/env python
#This script accepts log files as palin text and encrypt them.
import pickle

def main():
    file= open('/home/user1/ahmed/auth.log','r')
    text_file=file.read()
    encrypted = encrypt(text_file)
    print(encrypted)
    with open('/home/user1/ahmed/ciph.log','wb') as fp:
        pickle.dump(encrypted, fp)
    with open('/home/user1/ahmed/ciph.log','rb') as fp:
        decomp= pickle.load(fp)
    print(decrypt(decomp))
		
def encrypt(plain):
    """encrypt a string to a list of output symbols."""
    # Build the dictionary.
    dict_size = 256
    dictionary = {chr(i): i for i in range(dict_size)}

    w = ""
    result = []
    for c in plain:
        wc = w + c
        if wc in dictionary:
            w = wc
        else:
            result.append(dictionary[w])
            # Add wc to the dictionary.
            dictionary[wc] = dict_size
            dict_size += 1
            w = c
 
    # Output the code for w.
    if w:
        result.append(dictionary[w])
    return result
 
 
def decrypt(cipher):
    """decrypt a list of output ks to a string."""
    from io import StringIO
 
    # Build the dictionary.
    dict_size = 256
    dictionary = {i: chr(i) for i in range(dict_size)}
 
    # use StringIO, otherwise this becomes O(N^2)
    # due to string concatenation in a loop
    result = StringIO()
    w = chr(cipher.pop(0))
    result.write(w)
    for k in cipher:
        if k in dictionary:
            entry = dictionary[k]
        elif k == dict_size:
            entry = w + w[0]
        else:
            raise ValueError('Bad cipher k: %s' % k)
        result.write(entry)
 
        # Add w+entry[0] to the dictionary.
        dictionary[dict_size] = w + entry[0]
        dict_size += 1
 
        w = entry
    return result.getvalue()
 
if __name__ == "__main__" :
    main()
